EventTemplate,Occurrences
PacketResponder <*> for block <*> terminating,199
setLightsOn(<*>),181
"setSystemUiVisibility vis=<*> mask=<*> oldVal=<*> newVal=<*> diff=<*> fullscreenStackVis=<*> dockedStackVis=<*>, fullscreenStackBounds=Rect(<*>, <*> - <*>, <*>), dockedStackBounds=Rect(<*>, <*> - <*>, <*>)",181
HBM brightnessIn =<*>,85
HBM brightnessOut =<*>,85
Animating brightness: <*> target=<*> rate=<*>,85
getRunningAppProcesses: caller <*> does not hold REAL_GET_TASKS; limiting output,81
"userActivityNoUpdateLocked: eventTime=<*>, event=<*>, flags=<*>, uid=<*>",69
updateDimmedActivatedHideSensitive overlap:<*>,65
"updateClipping isOverlap:<*>, getTopPadding=<*>, Translation=-<*>",52
shouldBlockLocation running ...,37
shouldBlockLocation <*> ret:<*>,37
getTasks: caller <*> does not hold REAL_GET_TASKS; limiting output,37
"Releasing suspend blocker ""PowerManagerService.WakeLocks"".",33
"Acquiring suspend blocker ""PowerManagerService.WakeLocks"".",33
"Skipping, withExcluded: <*>, tr.intent:Intent { <*> }",28
suspendAutohide,23
Destroying surface <*> called by <*>,22
cancelPeek: <*>,20
cancelNotificationWithTag pid <*> uid = <*> tag = <*> pkg = <*> id = <*>,20
"cancelNotification,index:-<*>",20
querySoundEffectsEnabled...,17
cancelAutohide,15
acquire lock=<*> for block <*> terminating,15
interceptKeyTq <*> keycode=<*> interactive=<*> keyguardActive=<*> policyFlags=<*> down=<*> canceled=<*>,14
interceptKeyBeforeQueueing : key <*> result <*>,14
"Skipping, withExcluded: <*>, tr.intent:Intent { act=android.intent.action.MAIN flg=0x10840000 cmp=<*> (has extras) }",14
"getRecentTasks: num=<*>,flags=<*>,totalTasks=<*>",14
getRecentTasks: topActivity=<*>,14
"overlapAmount:<*>, previousNotificationEnd:<*>, newYTranslation:<*>, location:<*>, i:<*>, getTopPadding:<*>, getLocationOnScreen():<*>",13
"updateClipping isOverlap:<*>, getTopPadding=<*>, Translation=<*>",13
"updateNotificationShade: total=<*>, active=<*>",13
"setSystemUiVisibility vis=<*> mask=ffffffff oldVal=<*> newVal=<*> diff=<*> fullscreenStackVis=<*> dockedStackVis=<*>, fullscreenStackBounds=Rect(<*>, <*> - <*>, <*>), dockedStackBounds=Rect(<*>, <*> - <*>, <*>)",12
"state.clipTopAmount:<*>, i:<*>",12
removeNotificationChildren,12
closeQs,12
isMusicActive...,12
resumeSuspendedAutohide,10
playSoundEffect <*> effectType: <*>,10
instantCollapse,9
getLastAudibleStreamVolume treamType: <*>,9
"release:lock=<*>, flg=0x0, tag=""*launch*"", name=<*>, ws=WorkSource{<*>}, uid=<*>, pid=<*>",8
"release:lock=<*>, flg=0x0, tag=""RILJ_ACK_WL"", name=<*>, ws=<*>, uid=<*>, pid=<*>",7
"Skipping, withExcluded: <*>, tr.intent:Intent { flg=0x10800000 cmp=<*> (has extras) }",7
"Skipping, withExcluded: <*>, tr.intent:Intent { act=<*> dat=<*> flg=<*> cmp=<*> }",7
"Skipping, withExcluded: <*>, tr.intent:Intent { act=android.intent.action.VIEW dat=file:///storage/emulated/0/Tencent/QQfile_recv/b.apk typ=application/vnd.android.package-archive flg=0x10800000 cmp=com.android.packageinstaller/.PackageInstallerActivity (has extras) }",7
"release:lock=<*>, flg=0x0, tag=""<*>"", name=<*>, ws=<*>, uid=<*>, pid=<*>",6
"updateLightsLocked,turn off notificationLight",6
logNotificationVisibilityChanges runInThread start,6
onNotificationVisibilityChanged called,6
logNotificationVisibilityChanges runInThread over,6
"animateCollapsePanels: flags=<*>, force=<*>, delayed=<*>, mExpandedVisible=<*>",6
Layout begin,6
Layout end,6
cleanUpApplicationRecord -- <*>,6
"cleanUpApplicationRecordLocked, pid: <*>, restart: <*>",6
"cleanUpApplicationRecordLocked, reset pid: <*> euid: <*>",6
stopWifiDisplayScanLocked record.mWifiDisplayScanRequested=<*>,6
stopWifiDisplayScanLocked mWifiDisplayScanRequestCount=<*>,6
mVisiblity.getValue is <*>,5
"notifyUiVisibilityChanged:vis=0x40000500, SystemUiVisibility=0x40000500",5
getNeighboringCellInfo calling app is <*>,5
"updateLightsLocked,mInCall =<*>,mScreenOn = <*>,ledNotification == null?true",4
MotionEvent <*> for block <*> terminating,4
makeExpandedInvisible: mExpandedVisible=<*>,4
"ActivityManagerService,attachApplication,callingPid = <*>",4
mHeadsUpExistenceChangedRunnable,4
disable: < expand ICONS* alerts SYSTEM_INFO* back home recent clock navigationbar search quick_settings >,3
"notifyUiVisibilityChanged:vis=0x40000600, SystemUiVisibility=0x40000600",3
registerCallback not in UI.,3
Must execute in UI,3
"cancelNotification,index:<*>",3
disable: < expand icons* alerts system_info* back home recent clock navigationbar search quick_settings >,3
"acquire lock=<*> flags=<*> tag=""<*>"" name=<*> ws=<*> uid=<*> pid=<*>",3
"sending alarm Alarm{<*> type <*> when <*> PendingIntent{<*> PendingIntentRecord{<*>}}},repeatInterval = <*>,listenerTag =<*>",3
Received <*> alarm; rescheduling,3
scheduleTimeTickEvent triggerAtTime = <*>,3
received broadcast android.intent.action.TIME_TICK,3
handleTimeUpdate,3
"acquire lock=<*>, flags=0x1, tag=""RILJ_ACK_WL"", name=<*>, ws=<*>, uid=<*>, pid=<*>",3
"notifyUiVisibilityChanged:vis=0x708, SystemUiVisibility=0x708",3
"setSystemUiVisibility vis=c0000700 mask=ffffffff oldVal=<*> newVal=c0000700 diff=c0000008 fullscreenStackVis=<*> dockedStackVis=<*>, fullscreenStackBounds=Rect(<*>, <*> - <*>, <*>), dockedStackBounds=Rect(<*>, <*> - <*>, <*>)",3
"notifyUiVisibilityChanged:vis=0xc0000700, SystemUiVisibility=0xc0000700",3
getRingerMode...,3
ActivityRecord info: <*> euid: <*>,3
getAllCellInfo is blocked by permission manager . callingPackage = <*>,3
Skipping AppWindowToken for block <*> going to hide,2
"rotationForOrientationLw(orient=<*>, last=<*>) user=<*> USER_ROTATION_LOCKED",2
Application requested orientation <*> got rotation <*> which has compatible metrics,2
Skipping AppWindowToken <*> for token <*> going to hide,2
"notifyUiVisibilityChanged:vis=0x508, SystemUiVisibility=0x508",2
getRingtonePlayer...,2
onExpandingStarted,2
"flingToHeight: vel=<*>, expand=<*>, target=<*>, collapseSpeedUpFactor=<*>, expandBecauseOfFalsing=<*>",2
onExpandingFinished,2
Sending non-protected broadcast <*> from system <*> pkg <*>,2
KeyguardMonitor <*> for com.android.systemui.statusbar.policy terminating,2
"animateCollapsePanels <*> flags=<*>, force=<*>, delayed=<*>, mExpandedVisible=<*>",2
onNotificationClick called,2
"cancelNotification,cancelNotificationLocked,callingUid = <*>,callingPid = <*>",2
"cancelNotificationLocked called,tell the app,reason = <*>",2
cancelNotificationLocked:<*>|com.tencent.mobileqq|<*>|<*>|<*>,2
"cancelNotificationLocked,remove =<*>",2
applyOptionsLocked <*> Unknown animationType=<*>,2
"Taking screenshot from Surface with crop:[Rect(<*>, <*> - <*>, <*>)] width:[<*>] height:[<*>] minLayer:[<*>] maxLayer:[<*>] inRotation:[<*>] rot:[<*>]",2
removeNotification:<*>|com.tencent.mobileqq|<*>|<*>|<*>,2
getDevicesForStream <*> streamType: <*>,2
"sending alarm Alarm{<*> type <*> when <*> PendingIntent{<*> PendingIntentRecord{<*> <*>}}},repeatInterval = <*>,listenerTag = <*>.</s>",2
"Taking screenshot from Surface with crop:[Rect(<*>, <*> - <*>, <*>)], width:[<*>], height:[<*>], minLayer:[<*>], maxLayer:[<*>], inRotation:[<*>], rot:[<*>]",2
"updateLightsLocked,mInCall =<*>,mScreenOn = <*>,ledNotification == null?false",2
Marking notification as seen <*> for block <*> terminating,2
onNotificationExpansionChanged called,2
START <*> for block <*> terminating,2
"setSystemUiVisibility vis=<*> mask=ffffffff oldVal=c0000700 newVal=<*> diff=<*> fullscreenStackVis=<*> dockedStackVis=<*>, fullscreenStackBounds=Rect(<*>, <*> - <*>, <*>), dockedStackBounds=Rect(<*>, <*> - <*>, <*>)",2
"notifyUiVisibilityChanged:vis=<*>, SystemUiVisibility=<*>",2
"setSystemUiVisibility vis=<*> mask=ffffffff oldVal=<*> newVal=<*> diff=c0000008 fullscreenStackVis=<*> dockedStackVis=<*>, fullscreenStackBounds=Rect(<*>, <*> - <*>, <*>), dockedStackBounds=Rect(<*>, <*> - <*>, <*>)",2
ACTIVITY check resid: <*> size=<*>,2
RefreshBatteryInfo isBatteryLow: <*>,2
printFreezingDisplayLogsopening app <*>,1
"acquire lock=<*> flags=<*> tag=""View Lock"" name=<*> ws=<*> uid=<*> pid=<*>",1
visible is system.time.showampm,1
visible is system.charge.show,1
visible is system.call.count gt <*>,1
visible is system.message.count gt <*>,1
visible is system.ownerinfo.show,1
"release:lock=<*>, flg=0x0, tag=""View Lock"", name=<*>, ws=<*>, uid=<*>, pid=<*>",1
Destroying surface <*> called by <*> com.android.server.wm.WindowStateAnimator.destroyDeferredSurfaceLocked:<*> com.android.server.wm.WindowManagerService.performDeferredDestroyWindow:<*> com.android.server.wm.Session.performDeferredDestroy:<*> android.view.IWindowSession$Stub.onTransact:<*> com.android.server.wm.Session.onTransact:<*> android.os.Binder.execTransact,1
"release:lock=<*>, flg=0x0, tag=""WindowManager"", name=<*>, ws=WorkSource{<*>}, uid=<*>, pid=<*>",1
"orientation change is complete, call stopFreezingDisplayLocked",1
Screen frozen for <*> due to Window{ca98d5 u0 com.tencent.qt.qtl/com.tencent.qt.qtl.activity.info.NewsDetailXmlActivity},1
startAnimation begin,1
startAnimation end,1
"release:lock=<*>, flg=0x0, tag=""SCREEN_FROZEN"", name=<*>, ws=<*>, uid=<*>, pid=<*>",1
remove(PendingIntent <*>) changed bounds; rebatching,1
Bad activity token: <*>,1
ClassCastException: <*> cannot be cast to <*>,1
"onTouchEvent::<*>, x=<*>, y=<*>",1
schedulePeek,1
onTrackingStarted,1
Destroying surface <*> called by <*> com.android.server.wm.WindowStateAnimator.destroySurface:<*> com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:<*> com.android.server.wm.WindowState.removeLocked:<*> com.android.server.wm.WindowManagerService.removeWindowInnerLocked:<*> com.android.server.wm.WindowManagerService.removeWindowInnerLocked:<*> com.android.,1
"state.clipTopAmount:-<*>, i:<*>",1
onTouchEvent::<*> for block <*> terminating,1
onTrackingStopped: <*>,1
isSimPinSecure <*> mSimDatas is <*> or empty,1
unregister callback for <*>,1
PhoneIntfMgr getDataEnabled: subId=<*> phoneId=<*>,1
PhoneIntfMgr getDataEnabled: subId=<*> retVal=<*>,1
START <*> {act=<*> flg=<*> cmp=<*> (has extras)} from <*> on display <*>,1
"ActivityRecord info: ActivityInfo{<*> com.tencent.mobileqq.activity.SplashActivity}, euid: <*>",1
Destroying surface <*> called by <*> com.android.server.wm.WindowStateAnimator.destroySurface:<*> com.android.server.wm.WindowStateAnimator.destroySurfaceLocked:<*> com.android.server.wm.WindowState.destroyOrSaveSurface:<*> com.android.server.wm.AppWindowToken.destroySurfaces:<*> com.android.server.wm.AppWindowToken.notifyAppStopped:<*> com.android.server.w,1
"Start dump, calling from : pid=<*>, uid=<*>",1
"acquire lock=<*>, flags=<*>, tag=""WiredAccessoryManager"", name=<*>, ws=<*>, uid=<*>, pid=<*>",1
setWiredDeviceConnectionState <*> type: -<*> state: <*>,1
"acquire lock=<*>, flags=<*>, tag=""handleAudioEvent"", name=<*>, ws=<*>, uid=<*>, pid=<*>",1
setWiredDeviceConnectionState <*> type: <*> state: <*>,1
"release:lock=<*>, flg=0x0, tag=""WiredAccessoryManager"", name=<*>, ws=<*>, uid=<*>, pid=<*>",1
"release:lock=<*>, flg=0x0, tag=""handleAudioEvent"", name=<*>, ws=<*>, uid=<*>, pid=<*>",1
isBluetoothA2dpOn...,1
isBluetoothScoOn...,1
getMode...,1
setSpeakerphoneOn <*> on: <*>,1
setSpeakerphoneOn on:<*>,1
"acquire lock=<*> flags=0x1 tag=""RILJ_ACK_WL"" name=<*> ws=<*> uid=<*> pid=<*>",1
Killing <*> for block <*> empty for <*> seconds,1
remove(PendingIntent{<*>}) changed bounds; rebatching,1
Unable to start service <*> U=<*>: not found,1
unregisterAudioFocusListener...,1
abandonAudioFocus,1
"stayAwake <*> uid: <*>, pid: <*>",1
MediaPlayer <*> destructor,1
Process <*> com.tencent.mobileqq:qzone (pid <*>) has died,1
Scheduling restart of crashed service <*> in <*> ms,1
Process <*> for block <*> terminating,1
Start proc <*> for service <*> terminating,1
enqueueNotificationInternal: pkg=com.tencent.mobileqq id=<*> notification=Notification(pri=<*> contentView=<*> vibrate=[<*>] sound=<*> tick defaults=0x0 flags=0x11 color=0x00000000 vis=PRIVATE),1
enqueueNotificationInternal: <*> getKey = <*>,1
addNotification key=<*>|com.tencent.mobileqq|<*>|<*>|<*>,1
"rotationForOrientationLw(orient=-<*>, last=<*>); user=<*> USER_ROTATION_LOCKED",1
"Application requested orientation -<*>, got rotation <*> which has compatible metrics",1
"notifyUiVisibilityChanged:vis=0x40000000, SystemUiVisibility=0x40000000",1
getCellLocation is blocked by permission manager <*> uid:<*> pid:<*>,1
isWiredHeadsetOn...,1
"acquire lock=<*>, flags=<*>, tag=""<*>"", name=<*>, ws=<*>, uid=<*>, pid=<*>",1
setDataSource <*> for block <*> terminating,1
getStreamVolume treamType: <*>,1
"updateIsPoweredLocked: wasPowered=<*>, mIsPowered=<*>, oldPlugType=<*>, mPlugType=<*>, mBatteryLevel=<*>",1
received broadcast <*> android.intent.action.BATTERY_CHANGED,1
ACTION_BATTERY_CHANGED AMP: <*>; Volt: <*>,1
updateChargingLocked: charging=<*>,1
"onReceive, action:<*>",1
ACTION_BATTERY_CHANGED pluggedType: <*>,1
ApStaDisabledState what=<*>,1
DefaultState what=<*>,1
battery changed pluggedType: <*>,1
ChargingSpeed Wattage: <*> ST: <*> --> <*>,1
handleBatteryUpdate,1
enqueueNotificationInternal: pkg=com.tencent.mm id=<*> notification=Notification(pri=<*> contentView=<*> vibrate=[] sound=<*> tick defaults=0x0 flags=0x101 color=0x00000000 category=msg vis=PRIVATE),1
enqueueNotificationInternal: <*> getKey = <*> <*>|<*>|<*>,1
addNotification key=<*>|com.tencent.mm|<*>|<*>|<*>,1
START <*> {flg=0x24000000 cmp=<*> (has extras)} from <*> on display <*>,1
startActivity called from non-Activity context; forcing Intent.FLAG_ACTIVITY_NEW_TASK for: Intent <*>,1
